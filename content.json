{"meta":{"title":"Redcat","subtitle":null,"description":null,"author":"simplezzy","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"MySql的缓存机制","slug":"MySql的缓存机制","date":"2017-10-10T06:15:03.000Z","updated":"2017-10-10T07:08:13.971Z","comments":true,"path":"2017/10/10/MySql的缓存机制/","link":"","permalink":"http://yoursite.com/2017/10/10/MySql的缓存机制/","excerpt":"","text":"导语 MySql查询缓存机制是Mysql数据库的重要机制之一，本文将对其缓存机制进行较为深入的分析。 1. MySql查询缓存 &nbsp;&nbsp; MySql缓存主要指的是查询缓存-Query Cache,会缓存执行的sql文本及查询结果集。当运行相同的sql语句时，服务器直接从缓存中获取查询结果，而不再去解析和执行对应的sql。 &nbsp;&nbsp; Query Cache 的具体实现类似KV存储，将select语句和该查询语句的结果集作一个hash映射并保存在一定的内存区域中。Query Cache的查询逻辑： &nbsp;&nbsp; 客户端发起SQL查询 —&gt; 对SQL进行相应的权限验证 —-&gt; 通过Query Cache查询命中。这个过程不需要经过Optimizer模块进行执行计划的分析优化，更不需要发生同任何存储引擎的交互，减少了大量的磁盘IO和CPU运算，所以有时候效率非常高。但是当表更改了（表中任何数据或是结构的改变，包括INSERT、UPDATE、 DELETE、TRUNCATE、ALTER TABLE、DROP TABLE或DROP DATABASE等，也包括那些映射到改变了的表的使用MERGE表的查询），那么这个表的所有缓存查询将不再有效，查询缓存值得相关条目也会被清空。因此，对于频繁更新的表，查询缓存是不合适的，而对于一些不常改变但有大量相同sql查询的表，查询缓存会节约很大的性能 2. Query Cache的设置参数&nbsp;&nbsp; 通过调整Mysql查询缓存的参数可以设置Query Cache的功能和性能，主要包括6个参数： &nbsp;&nbsp; -&gt; show variables like ‘%query _ cache%’; have_ query_cache: 查询缓存是否可用 query _ cache _limit: 允许缓存的单条查询结果集的最大容量，默认是1MB，超过此参数设置的查询结果集将不会被缓存 query cache size: 设置 Query Cache 所使用的内存大小，默认值为0，大小必须是1024的整数倍，如果不是整数倍，MySQL 会自动调整降低最小量以达到1024的倍数； query cache type: OFF关闭 ； ON 开启；Demand 开启Query Cache 功能，但是只有当SELECT语句中使用了SQL _ CACHE 提示后，才使用Query Cache query cache wlock _ invalidate：控制当有写锁定发生在表上的时刻是否先失效该表相关的Query Cache，如果设置为 1(TRUE)，则在写锁定的同时将失效该表相关的所有Query Cache，如果设置为0(FALSE)则在锁定时刻仍然允许读取该表相关的Query Cache。 query cache min res unit：设置查询缓存Query Cache每次分配内存的最小空间大小，即每个查询的缓存最小占用的内存空间大小&nbsp;&nbsp; 判定是否采用缓存查询，可以使用MySql语句查看：&nbsp;&nbsp; -&gt;show status like ‘Qcache hits’;&nbsp;&nbsp; &nbsp;&nbsp; Qcache hits表示sql查询在缓存中命中的累计次数，是累加值&nbsp;&nbsp; 设置缓存内存，可以使用MySql语句：&nbsp;&nbsp; mysql&gt; set global query cache size = 600000; –设置缓存内存&nbsp;&nbsp; 开启缓存查询，可以使用MySql语句：&nbsp;&nbsp; mysql&gt; set session query _ cache _type = ON; –开启查询缓存 3. Query Cache的性能分析&nbsp;&nbsp; 对于某些写频繁的系统，开启Query Cache功能可能并不能让系统性能有提升，有时反而会有下降。&nbsp;&nbsp;MySql为了保证Query Cache缓存的内容和实际数据绝对一致，当某个数据表发生了更新、删除及插入操作，MySql都会强制使所有引用到该表的查询SQL的Query Cache失效。对于密集写操作，启用查询缓存后很可能造成频繁的缓存失效，间接引发内存激增及CPU飙升，对已经非常忙碌的数据库系统这是一种极大的负担。4. Query Cache实现差异&nbsp;&nbsp; Query Cache因MySql的存储引擎不同而实现略有差异，比如MyISAM，缓存的结果集存储在OS Cache中，而最流行的InnoDB则放在Buffer Pool中。","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"Elasticsearch系列-ES结构详解","slug":"Elasticsearch系列-ES结构详解","date":"2017-09-19T03:36:49.000Z","updated":"2017-09-21T03:13:02.010Z","comments":true,"path":"2017/09/19/Elasticsearch系列-ES结构详解/","link":"","permalink":"http://yoursite.com/2017/09/19/Elasticsearch系列-ES结构详解/","excerpt":"","text":"导语 本文主要针对ES进行较为详细的总结 1. Java API 节点客户端 (无数据节点加入集群，转发请求) 传输客户端 (不直接加入集群，转发请求) 2. HTTP协议 以JSON为数据交互格式的RESTful APIcurl -X ‘://:/?‘ -d ‘‘ 终端测试 &nbsp;&nbsp; curl ‘http://localhost:9200/?pretty‘ 浏览器测试 &nbsp;&nbsp; http://localhost:9200/?pretty 3. Elasticsearch-head插件 网上有很多的插件安装方法，这里采用最简单的方式：通过chrome商城添加拓展程序elasticsearch-head安装即可 打开此应用，即可出现：","categories":[],"tags":[]},{"title":"Elasticsearch系列 --安装与部署","slug":"Elasticsearch系列-安装与部署","date":"2017-09-13T07:17:30.000Z","updated":"2017-09-13T08:24:30.118Z","comments":true,"path":"2017/09/13/Elasticsearch系列-安装与部署/","link":"","permalink":"http://yoursite.com/2017/09/13/Elasticsearch系列-安装与部署/","excerpt":"","text":"导语 本文主要针对windows环境，快速安装体验version5x的ES 1. ES的安装 download &nbsp;&nbsp; https://www.elastic.co/downloads/elasticsearch tar file 2. ES的运行 启动服务 &nbsp;&nbsp; /bin/elasticsearch.bat 终端测试 &nbsp;&nbsp; curl ‘http://localhost:9200/?pretty‘ 浏览器测试 &nbsp;&nbsp; http://localhost:9200/?pretty 3. Elasticsearch-head插件 网上有很多的插件安装方法，这里采用最简单的方式：通过chrome商城添加拓展程序elasticsearch-head安装即可 打开此应用，即可出现：","categories":[],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"}]},{"title":"Elasticsearch系列--ES漫谈","slug":"Elasticsearch系列-ES漫谈","date":"2017-09-12T03:42:31.000Z","updated":"2017-09-13T08:29:47.718Z","comments":true,"path":"2017/09/12/Elasticsearch系列-ES漫谈/","link":"","permalink":"http://yoursite.com/2017/09/12/Elasticsearch系列-ES漫谈/","excerpt":"","text":"导语 早在IBM的时候，就开始使用Elasticsearch，一直想聊聊ES的那些事儿，这次是真下定决心了… 那点事儿 &nbsp;&nbsp;&nbsp;&nbsp;Elasticsearch是一个实时分布式搜索和分析引擎，基于Apache Lucene(TM)的开源搜索引擎。Lucene可以被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。ES使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能,ES通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。实际上可以这么看ES:&nbsp;&nbsp;- 基于Lucene和全文搜索&nbsp;&nbsp;- 分布式的实时文件存储，每个字段都被索引并可被搜索&nbsp;&nbsp;- 分布式的实时分析搜索引擎&nbsp;&nbsp;- 可以扩展到上百台服务器，处理PB级结构化或非结构化数据 &nbsp;&nbsp;&nbsp;&nbsp;相关应用：&nbsp;&nbsp;- 维基百科使用Elasticsearch提供全文搜索并高亮关键字，以及输入实时搜索(search-as-you-type)和搜索纠错(did-you-mean)等搜索建议功能。&nbsp;&nbsp;- 英国卫报使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈&nbsp;&nbsp;- StackOverflow结合全文搜索与地理位置查询，以及more-like-this功能来找到相关的问题和答案&nbsp;&nbsp;- Github使用Elasticsearch检索1300亿行的代码 &nbsp;&nbsp;&nbsp;&nbsp;Elasticsearch可取之处就在于将全文搜索，分析系统以及分布式数据库等技术整合成一个一体化的、实时的应用，上手容易，开箱即用，并且支持定制化Elasticsearch的高级特性。","categories":[],"tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://yoursite.com/tags/elasticsearch/"}]},{"title":"kafka系列--安装与测试","slug":"kafka系列-安装与测试","date":"2017-09-07T11:22:56.000Z","updated":"2017-09-07T13:01:08.581Z","comments":true,"path":"2017/09/07/kafka系列-安装与测试/","link":"","permalink":"http://yoursite.com/2017/09/07/kafka系列-安装与测试/","excerpt":"","text":"导语 Kafka 是一款分布式消息发布和订阅的系统，具有高性能和高吞吐率 1. Kafka的安装 download &nbsp;&nbsp; http://kafka.apache.org/downloads scp local_file &nbsp;&nbsp; scp -rp kafka_2.10-0.10.2.1.tgz root@ip:/tmp tar file &nbsp;&nbsp; tar -zxvf /tmp/redis-4.0.1.tar.gz -C /home/ 2. Kafka的运行 启动服务 &nbsp;&nbsp; kafka用到了Zookeeper,在kafka启动之前需要确认对应的Zookeeper服务已经启动。&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zkServer.sh status确认之后即可启动kafka服务 &nbsp;&nbsp; ./bin/kafka-server-start.sh config/server.properties &amp; (&amp;表示在后台执行) 3. Kafka的测试 创建topic &nbsp;&nbsp; .bin/kafka-topics.sh –create –zookeeper localhost:2181 –replication-factor 1 –partitions 1 –topic test 查看topic&nbsp;&nbsp; ./bin/kafka-topics.sh –list –zookeeper localhost:2181 启动producer&nbsp;&nbsp; ./bin/kafka-console-producer.sh –broker-list localhost:9092 –topic test&nbsp;&nbsp; This is a message&nbsp;&nbsp; This is another message 启动consumer&nbsp;&nbsp; ./bin/kafka-console-consumer.sh –zookeeper localhost:2181 –topic test –from-beginning&nbsp;&nbsp; This is a message&nbsp;&nbsp; This is another message 这个时候kafka的单机模式搭建已经完成，后面将介绍kafka的集群安装与测试","categories":[],"tags":[{"name":"kafka","slug":"kafka","permalink":"http://yoursite.com/tags/kafka/"}]},{"title":"redis系列--数据类型详解","slug":"redis系列-数据类型详解","date":"2017-09-07T07:48:52.000Z","updated":"2017-09-07T09:05:52.549Z","comments":true,"path":"2017/09/07/redis系列-数据类型详解/","link":"","permalink":"http://yoursite.com/2017/09/07/redis系列-数据类型详解/","excerpt":"","text":"导语 Redis 数据类型主要有7种，分别是 String、Hash、List、Set、Sorted set、pub/sub、Transactions，其中后两种并不常用。从Redis内存管理来看，有其特别的描述方式。Redis内部使用一个redisObject对象来表示所有的key和value，而redisObject最主要的信息包括：type,encoding,vm等。 type代表一个value对象具体是何种数据类型， encoding是不同数据类型在redis内部的存储方式，vm字段，只有打开了Redis的虚拟内存功能，此字段才会真正的分配内存，该功能默认是关闭状态的。 Redis HashRedis Hash对应Value内部实际就是一个HashMap，实际这里会有2种不同实现，这个Hash的成员比较少时Redis为了节省内存会采用类似一维数组的方式来紧凑存储(small hash)，而不会采用真正的HashMap结构，对应的value redisObject的encoding为zipmap,当成员数量增大时会自动转成真正的HashMap,此时encoding为ht。 hash-max-zipmap-entries 512 hash-max-zipmap-value 64 Redis Pub/Sub在Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。 Redis TransactionsRedis的Transactions提供的并不是严格的ACID的事务（比如一串用EXEC提交执行的命令，在执行中服务器宕机，那么会有一部分命令执行了，剩下的没执行），但是这个Transactions还是提供了基本的命令打包执行的功能（在服务器不出问题的情况下，可以保证一连串的命令是顺序在一起执行的，中间有会有其它客户端命令插进来执行）。Redis还提供了一个Watch功能，你可以对一个key进行Watch，然后再执行Transactions，在这过程中，如果这个Watched的值进行了修改，那么这个Transactions会发现并拒绝执行。","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"redis系列--数据结构解析","slug":"redis系列-数据结构解析","date":"2017-09-07T06:47:06.000Z","updated":"2017-09-07T09:05:48.005Z","comments":true,"path":"2017/09/07/redis系列-数据结构解析/","link":"","permalink":"http://yoursite.com/2017/09/07/redis系列-数据结构解析/","excerpt":"","text":"导语 Redis 是一个基于键值对（key-value）的分布式存储系统,也是一个高性能的key-value数据库。 很显然，键值对（key-value）的类型显得尤为重要。《Redis设计与实现》中提到：Redis 数据库里面的每个键值对（key-value） 都是由对象（object）组成的。数据库键总是一个字符串对象（string object）;数据库的值则可以是字符串对象、列表对象（list）、哈希对象（hash）、集合对象（set）、有序集合（sort set）对象这五种对象中的其中一种。 1. redis的安装 download &nbsp;&nbsp; https://redis.io/download scp local_file &nbsp;&nbsp; scp -rp redis-4.0.1.tar.gz root@ip:/tmp tar file &nbsp;&nbsp; tar -zxvf /tmp/redis-4.0.1.tar.gz -C /home/ complie &amp;&amp; install &nbsp;&nbsp;&nbsp;&nbsp; cd /home/redis-4.0.1/&nbsp; make&nbsp;&nbsp;&nbsp;cd src/&nbsp; make install&nbsp;&nbsp;","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"redis系列--分布式缓存漫谈","slug":"redis系列-分布式缓存漫谈","date":"2017-09-07T06:46:44.000Z","updated":"2017-09-07T06:46:44.485Z","comments":true,"path":"2017/09/07/redis系列-分布式缓存漫谈/","link":"","permalink":"http://yoursite.com/2017/09/07/redis系列-分布式缓存漫谈/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"redis系列--linux下安装与部署","slug":"redis系列-安装与部署","date":"2017-09-06T09:23:47.728Z","updated":"2017-09-09T04:04:33.303Z","comments":true,"path":"2017/09/06/redis系列-安装与部署/","link":"","permalink":"http://yoursite.com/2017/09/06/redis系列-安装与部署/","excerpt":"","text":"导语 Redis 是当前比较热门的NOSQL之一 1. redis的安装 download &nbsp;&nbsp; https://redis.io/download scp local_file &nbsp;&nbsp; scp -rp redis-4.0.1.tar.gz root@ip:/tmp tar file &nbsp;&nbsp; tar -zxvf /tmp/redis-4.0.1.tar.gz -C /home/ complie &amp;&amp; install &nbsp;&nbsp;&nbsp;&nbsp; cd /home/redis-4.0.1/&nbsp; make&nbsp;&nbsp;&nbsp;cd src/&nbsp; make install&nbsp;&nbsp; 2. redis的部署 文件管理 &nbsp;&nbsp; 方便配置文件和cmd管理，创建bin和conf文件:在安装目录下：mkdir bin | mkdir ect&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv src/mkreleasehdr.sh redis-check-aof redis-check-rdb redis-cli redis-sentinel redis-server redis-benchmark ./bin/&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv redis.conf /ect 启动服务(前台) &nbsp;&nbsp; ./bin/redis-server&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;注意：默认情况下，启动的redis服务实在前台直接运行的，当关闭会话后，服务也随之关闭。 启动服务(后台) &nbsp;&nbsp; 修改conf文件 &nbsp;&nbsp; &nbsp;&nbsp;vim /ect/redis.conf &nbsp;&nbsp; 将daemonize的值改为yes.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./bin/redis-server ect/redis.conf &nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;停止服务 bin/redis-cli shutdown (or pkill bin/redis-server) 启动客户端 &nbsp;&nbsp; ./bin/redis-cli 查看端口号 &nbsp;&nbsp; netstat -tunpl | grep 6379 3. redis 测试 启动客户端 &nbsp;&nbsp; ./bin/redis-cli&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; set testkey “this is my test”&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; get testkey&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; “this is my test”&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt; exit 至此，Redis的安装部署全部成功，开始享受Redis之旅了.","categories":[],"tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]},{"title":"git flow工作流","slug":"git-flow工作流","date":"2017-09-06T08:53:38.000Z","updated":"2017-09-06T08:57:27.169Z","comments":true,"path":"2017/09/06/git-flow工作流/","link":"","permalink":"http://yoursite.com/2017/09/06/git-flow工作流/","excerpt":"","text":"","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"spring-cloud 漫谈","slug":"spring-cloud-漫谈","date":"2017-09-06T08:53:38.000Z","updated":"2017-09-06T09:24:54.152Z","comments":true,"path":"2017/09/06/spring-cloud-漫谈/","link":"","permalink":"http://yoursite.com/2017/09/06/spring-cloud-漫谈/","excerpt":"","text":"See your changes instantly with LivePreviewDon’t guess if your hyperlink syntax is correct; LivePreview will show you exactly what your document looks like every time you press a key. Make it your ownFonts, color schemes, layouts and stylesheets are all 100% customizable so you can turn MarkdownPad into your perfect editor.","categories":[],"tags":[{"name":"spring-cloud","slug":"spring-cloud","permalink":"http://yoursite.com/tags/spring-cloud/"}]},{"title":"hexo+github 成就个人blog","slug":"hexo-github-成就个人blog","date":"2017-09-06T06:03:30.112Z","updated":"2017-09-09T04:05:30.214Z","comments":true,"path":"2017/09/06/hexo-github-成就个人blog/","link":"","permalink":"http://yoursite.com/2017/09/06/hexo-github-成就个人blog/","excerpt":"","text":"导语Enjoy first-class Markdown support with easy access to Markdown syntax and convenient keyboard shortcuts. Give them a try: Bold (Ctrl+B) and Italic (Ctrl+I) Quotes (Ctrl+Q) Code blocks (Ctrl+K) Headings 1, 2, 3 (Ctrl+1, Ctrl+2, Ctrl+3) Lists (Ctrl+U and Ctrl+Shift+O)","categories":[],"tags":[{"name":"hexo  blog","slug":"hexo-blog","permalink":"http://yoursite.com/tags/hexo-blog/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-08-31T13:22:13.736Z","updated":"2017-08-31T13:22:13.736Z","comments":true,"path":"2017/08/31/hello-world/","link":"","permalink":"http://yoursite.com/2017/08/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}